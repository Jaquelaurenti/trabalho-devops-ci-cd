AWSTemplateFormatVersion: '2010-09-09'
Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: MyCluster

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: MyTaskDefinition
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: MyAppContainer
          Image: my-docker-repo/my-app:latest
          PortMappings:
            - ContainerPort: 3000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: my-logs-group
              awslogs-region: us-east-1
              awslogs-stream-prefix: my-app

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MyTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  Service:
    Type: AWS::ECS::Service
    DependsOn: Cluster
    Properties:
      ServiceName: MyService
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - subnet-07f009fc648ecaf86 # Subnet ID SUBSTITUIR
          AssignPublicIp: ENABLED

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyLoadBalancer
      Subnets:
        - subnet-07f009fc648ecaf86 # Subnet ID SUBSTITUIR
        - subnet-03e9de3df020fba3f # Subnet ID SUBSTITUIR
      SecurityGroups:
        - sg-0c17c2b7f4eab8a9b # Security Group ID -- SUBSTITUIR
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Tags:
        - Key: Name
          Value: MyLoadBalancer

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: LoadBalancer
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      Name: MyTargetGroup
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: vpc-013c1f8749b67d68a # VPC ID SUBSTITUIR
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

Outputs:
  LoadBalancerDNSName:
    Value: !GetAtt LoadBalancer.DNSName
